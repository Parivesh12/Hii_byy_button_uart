
button_hii.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fc0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001160  08001160  00002160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011a8  080011a8  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  080011a8  080011a8  000021a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080011b0  080011b0  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011b0  080011b0  000021b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080011b4  080011b4  000021b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  080011b8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000054  0800120c  00003054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  0800120c  000031d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 12 .debug_info   000014d3  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004e6  00000000  00000000  00004557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000148  00000000  00000000  00004a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000e1  00000000  00000000  00004b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001481f  00000000  00000000  00004c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000209d  00000000  00000000  00019488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000821b4  00000000  00000000  0001b525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009d6d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000008ac  00000000  00000000  0009d71c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  0009dfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000054 	.word	0x20000054
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001148 	.word	0x08001148

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000058 	.word	0x20000058
 80001dc:	08001148 	.word	0x08001148

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	@ (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	6039      	str	r1, [r7, #0]
 80002c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	db0a      	blt.n	80002e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	490c      	ldr	r1, [pc, #48]	@ (8000308 <__NVIC_SetPriority+0x4c>)
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e4:	e00a      	b.n	80002fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	4908      	ldr	r1, [pc, #32]	@ (800030c <__NVIC_SetPriority+0x50>)
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	f003 030f 	and.w	r3, r3, #15
 80002f2:	3b04      	subs	r3, #4
 80002f4:	0112      	lsls	r2, r2, #4
 80002f6:	b2d2      	uxtb	r2, r2
 80002f8:	440b      	add	r3, r1
 80002fa:	761a      	strb	r2, [r3, #24]
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	e000e100 	.word	0xe000e100
 800030c:	e000ed00 	.word	0xe000ed00

08000310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	3b01      	subs	r3, #1
 800031c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000320:	d301      	bcc.n	8000326 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000322:	2301      	movs	r3, #1
 8000324:	e00f      	b.n	8000346 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000326:	4a0a      	ldr	r2, [pc, #40]	@ (8000350 <SysTick_Config+0x40>)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	3b01      	subs	r3, #1
 800032c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800032e:	210f      	movs	r1, #15
 8000330:	f04f 30ff 	mov.w	r0, #4294967295
 8000334:	f7ff ffc2 	bl	80002bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000338:	4b05      	ldr	r3, [pc, #20]	@ (8000350 <SysTick_Config+0x40>)
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800033e:	4b04      	ldr	r3, [pc, #16]	@ (8000350 <SysTick_Config+0x40>)
 8000340:	2207      	movs	r2, #7
 8000342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000344:	2300      	movs	r3, #0
}
 8000346:	4618      	mov	r0, r3
 8000348:	3708      	adds	r7, #8
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	e000e010 	.word	0xe000e010

08000354 <config_evry>:
#include "stm32f4xx.h"
#include <string.h>
#include <stdio.h>

void config_evry(void){
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 0);      // clk config for GPIOA
 8000358:	4b2f      	ldr	r3, [pc, #188]	@ (8000418 <config_evry+0xc4>)
 800035a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800035c:	4a2e      	ldr	r2, [pc, #184]	@ (8000418 <config_evry+0xc4>)
 800035e:	f043 0301 	orr.w	r3, r3, #1
 8000362:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->AHB1ENR |= (1 << 3);      // CLK CONFIG FOR GPIOD
 8000364:	4b2c      	ldr	r3, [pc, #176]	@ (8000418 <config_evry+0xc4>)
 8000366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000368:	4a2b      	ldr	r2, [pc, #172]	@ (8000418 <config_evry+0xc4>)
 800036a:	f043 0308 	orr.w	r3, r3, #8
 800036e:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= (1 << 17);     // clk config for usart2
 8000370:	4b29      	ldr	r3, [pc, #164]	@ (8000418 <config_evry+0xc4>)
 8000372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000374:	4a28      	ldr	r2, [pc, #160]	@ (8000418 <config_evry+0xc4>)
 8000376:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800037a:	6413      	str	r3, [r2, #64]	@ 0x40

    GPIOA->MODER = 0x00000000;   // set pa0 as input mode
 800037c:	4b27      	ldr	r3, [pc, #156]	@ (800041c <config_evry+0xc8>)
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= (1 << 5);    // set pa2 as in AF mode
 8000382:	4b26      	ldr	r3, [pc, #152]	@ (800041c <config_evry+0xc8>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a25      	ldr	r2, [pc, #148]	@ (800041c <config_evry+0xc8>)
 8000388:	f043 0320 	orr.w	r3, r3, #32
 800038c:	6013      	str	r3, [r2, #0]
    GPIOD->MODER &= ~(0x3 << (15 * 2)); // Clear mode bits for pin 15
 800038e:	4b24      	ldr	r3, [pc, #144]	@ (8000420 <config_evry+0xcc>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	4a23      	ldr	r2, [pc, #140]	@ (8000420 <config_evry+0xcc>)
 8000394:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8000398:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |= (0x1 << (15 * 2));  // Set mode to output for pin 15
 800039a:	4b21      	ldr	r3, [pc, #132]	@ (8000420 <config_evry+0xcc>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a20      	ldr	r2, [pc, #128]	@ (8000420 <config_evry+0xcc>)
 80003a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80003a4:	6013      	str	r3, [r2, #0]
    GPIOD->MODER &= ~(0x3 << (14 * 2)); // Clear mode bits for pin 14
 80003a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000420 <config_evry+0xcc>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a1d      	ldr	r2, [pc, #116]	@ (8000420 <config_evry+0xcc>)
 80003ac:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80003b0:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |= (0x1 << (14 * 2));  // Set mode to output for pin 14
 80003b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000420 <config_evry+0xcc>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a1a      	ldr	r2, [pc, #104]	@ (8000420 <config_evry+0xcc>)
 80003b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003bc:	6013      	str	r3, [r2, #0]

    GPIOA->AFR[0] |= (7 << 8);   // for usart2 AF
 80003be:	4b17      	ldr	r3, [pc, #92]	@ (800041c <config_evry+0xc8>)
 80003c0:	6a1b      	ldr	r3, [r3, #32]
 80003c2:	4a16      	ldr	r2, [pc, #88]	@ (800041c <config_evry+0xc8>)
 80003c4:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80003c8:	6213      	str	r3, [r2, #32]

    USART2->BRR = 0x0683;        // set baud rate of 9600
 80003ca:	4b16      	ldr	r3, [pc, #88]	@ (8000424 <config_evry+0xd0>)
 80003cc:	f240 6283 	movw	r2, #1667	@ 0x683
 80003d0:	609a      	str	r2, [r3, #8]
    USART2->CR1 |= (1 << 3);     // enable tx pin for sending data
 80003d2:	4b14      	ldr	r3, [pc, #80]	@ (8000424 <config_evry+0xd0>)
 80003d4:	68db      	ldr	r3, [r3, #12]
 80003d6:	4a13      	ldr	r2, [pc, #76]	@ (8000424 <config_evry+0xd0>)
 80003d8:	f043 0308 	orr.w	r3, r3, #8
 80003dc:	60d3      	str	r3, [r2, #12]
    USART2->CR1 |= (1 << 13);    // enable usart2
 80003de:	4b11      	ldr	r3, [pc, #68]	@ (8000424 <config_evry+0xd0>)
 80003e0:	68db      	ldr	r3, [r3, #12]
 80003e2:	4a10      	ldr	r2, [pc, #64]	@ (8000424 <config_evry+0xd0>)
 80003e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003e8:	60d3      	str	r3, [r2, #12]
    USART2->CR1 &= ~(1 << 12);   // word length of 1 start bit and 8 data bit
 80003ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000424 <config_evry+0xd0>)
 80003ec:	68db      	ldr	r3, [r3, #12]
 80003ee:	4a0d      	ldr	r2, [pc, #52]	@ (8000424 <config_evry+0xd0>)
 80003f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80003f4:	60d3      	str	r3, [r2, #12]
    USART2->CR1 &= ~(1 << 15);   // over sampling by 16
 80003f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000424 <config_evry+0xd0>)
 80003f8:	68db      	ldr	r3, [r3, #12]
 80003fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000424 <config_evry+0xd0>)
 80003fc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000400:	60d3      	str	r3, [r2, #12]
    USART2->CR2 &= ~(3 << 12);   // 1 stop bit
 8000402:	4b08      	ldr	r3, [pc, #32]	@ (8000424 <config_evry+0xd0>)
 8000404:	691b      	ldr	r3, [r3, #16]
 8000406:	4a07      	ldr	r2, [pc, #28]	@ (8000424 <config_evry+0xd0>)
 8000408:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800040c:	6113      	str	r3, [r2, #16]
}
 800040e:	bf00      	nop
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr
 8000418:	40023800 	.word	0x40023800
 800041c:	40020000 	.word	0x40020000
 8000420:	40020c00 	.word	0x40020c00
 8000424:	40004400 	.word	0x40004400

08000428 <config_interrupt>:

void config_interrupt(void){
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
    // Enable SYSCFG clock
    RCC->APB2ENR |= (1 << 14);   // clk config for interrupt
 800042c:	4b0e      	ldr	r3, [pc, #56]	@ (8000468 <config_interrupt+0x40>)
 800042e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000430:	4a0d      	ldr	r2, [pc, #52]	@ (8000468 <config_interrupt+0x40>)
 8000432:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000436:	6453      	str	r3, [r2, #68]	@ 0x44

    // Connect EXTI line to PA0
    SYSCFG->EXTICR[0] = 0x00000000; // EXTI0 is connected to PA0
 8000438:	4b0c      	ldr	r3, [pc, #48]	@ (800046c <config_interrupt+0x44>)
 800043a:	2200      	movs	r2, #0
 800043c:	609a      	str	r2, [r3, #8]

    // Configure EXTI line 0
    EXTI->IMR |= (1 << 0);  // Unmask interrupt
 800043e:	4b0c      	ldr	r3, [pc, #48]	@ (8000470 <config_interrupt+0x48>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a0b      	ldr	r2, [pc, #44]	@ (8000470 <config_interrupt+0x48>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	6013      	str	r3, [r2, #0]
    EXTI->RTSR |= (1 << 0); // Trigger on rising edge
 800044a:	4b09      	ldr	r3, [pc, #36]	@ (8000470 <config_interrupt+0x48>)
 800044c:	689b      	ldr	r3, [r3, #8]
 800044e:	4a08      	ldr	r2, [pc, #32]	@ (8000470 <config_interrupt+0x48>)
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	6093      	str	r3, [r2, #8]

    // Enable and set EXTI0 Interrupt to priority 1
    NVIC_SetPriority(EXTI0_IRQn, 1);
 8000456:	2101      	movs	r1, #1
 8000458:	2006      	movs	r0, #6
 800045a:	f7ff ff2f 	bl	80002bc <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI0_IRQn);
 800045e:	2006      	movs	r0, #6
 8000460:	f7ff ff0e 	bl	8000280 <__NVIC_EnableIRQ>
}
 8000464:	bf00      	nop
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40023800 	.word	0x40023800
 800046c:	40013800 	.word	0x40013800
 8000470:	40013c00 	.word	0x40013c00

08000474 <timer2_config>:

void timer2_config(void){
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= (1 << 0);      // clk config for timer
 8000478:	4b10      	ldr	r3, [pc, #64]	@ (80004bc <timer2_config+0x48>)
 800047a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800047c:	4a0f      	ldr	r2, [pc, #60]	@ (80004bc <timer2_config+0x48>)
 800047e:	f043 0301 	orr.w	r3, r3, #1
 8000482:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM2->PSC = 1599;              // Prescaler value (assuming 84 MHz clock -> 10 kHz)
 8000484:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000488:	f240 623f 	movw	r2, #1599	@ 0x63f
 800048c:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 19999;             // Auto-reload value (10 kHz / 50000 = 0.2 Hz -> 5 seconds)
 800048e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000492:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000496:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->DIER |= (1 << 0);        // Enable update interrupt
 8000498:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800049c:	68db      	ldr	r3, [r3, #12]
 800049e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004a2:	f043 0301 	orr.w	r3, r3, #1
 80004a6:	60d3      	str	r3, [r2, #12]
    NVIC_SetPriority(TIM2_IRQn, 1);
 80004a8:	2101      	movs	r1, #1
 80004aa:	201c      	movs	r0, #28
 80004ac:	f7ff ff06 	bl	80002bc <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 80004b0:	201c      	movs	r0, #28
 80004b2:	f7ff fee5 	bl	8000280 <__NVIC_EnableIRQ>
}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	40023800 	.word	0x40023800

080004c0 <USART_send>:

void USART_send(char msg){
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
    USART2->DR = msg;
 80004ca:	4a08      	ldr	r2, [pc, #32]	@ (80004ec <USART_send+0x2c>)
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	6053      	str	r3, [r2, #4]
    while(!(USART2->SR & (1 << 7)));
 80004d0:	bf00      	nop
 80004d2:	4b06      	ldr	r3, [pc, #24]	@ (80004ec <USART_send+0x2c>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d0f9      	beq.n	80004d2 <USART_send+0x12>
}
 80004de:	bf00      	nop
 80004e0:	bf00      	nop
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	40004400 	.word	0x40004400

080004f0 <USART_sendt>:

void USART_sendt(char* msg){
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
    while(*msg){
 80004f8:	e00c      	b.n	8000514 <USART_sendt+0x24>
        USART2->DR = *msg++;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	1c5a      	adds	r2, r3, #1
 80004fe:	607a      	str	r2, [r7, #4]
 8000500:	781a      	ldrb	r2, [r3, #0]
 8000502:	4b0a      	ldr	r3, [pc, #40]	@ (800052c <USART_sendt+0x3c>)
 8000504:	605a      	str	r2, [r3, #4]
        while(!(USART2->SR & (1 << 7)));
 8000506:	bf00      	nop
 8000508:	4b08      	ldr	r3, [pc, #32]	@ (800052c <USART_sendt+0x3c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000510:	2b00      	cmp	r3, #0
 8000512:	d0f9      	beq.n	8000508 <USART_sendt+0x18>
    while(*msg){
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d1ee      	bne.n	80004fa <USART_sendt+0xa>
    }
}
 800051c:	bf00      	nop
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40004400 	.word	0x40004400

08000530 <EXTI0_IRQHandler>:
volatile uint32_t pressed_once = 0;
volatile uint32_t toggle = 0;

volatile uint32_t ms2=0;

void EXTI0_IRQHandler(void){
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
    if(EXTI->PR & (1 << 0)){
 8000534:	4b0c      	ldr	r3, [pc, #48]	@ (8000568 <EXTI0_IRQHandler+0x38>)
 8000536:	695b      	ldr	r3, [r3, #20]
 8000538:	f003 0301 	and.w	r3, r3, #1
 800053c:	2b00      	cmp	r3, #0
 800053e:	d00e      	beq.n	800055e <EXTI0_IRQHandler+0x2e>
//       button_press_count++;
//    	delay(10);
        EXTI->PR |= (1 << 0);     // Clear interrupt flag
 8000540:	4b09      	ldr	r3, [pc, #36]	@ (8000568 <EXTI0_IRQHandler+0x38>)
 8000542:	695b      	ldr	r3, [r3, #20]
 8000544:	4a08      	ldr	r2, [pc, #32]	@ (8000568 <EXTI0_IRQHandler+0x38>)
 8000546:	f043 0301 	orr.w	r3, r3, #1
 800054a:	6153      	str	r3, [r2, #20]
        button_pressed = 1;       // Set the button pressed flag
 800054c:	4b07      	ldr	r3, [pc, #28]	@ (800056c <EXTI0_IRQHandler+0x3c>)
 800054e:	2201      	movs	r2, #1
 8000550:	701a      	strb	r2, [r3, #0]
//        debounce_counter = 0;     // Reset debounce counter
        pressed_once = 1;   //
 8000552:	4b07      	ldr	r3, [pc, #28]	@ (8000570 <EXTI0_IRQHandler+0x40>)
 8000554:	2201      	movs	r2, #1
 8000556:	601a      	str	r2, [r3, #0]
        off = 0;
 8000558:	4b06      	ldr	r3, [pc, #24]	@ (8000574 <EXTI0_IRQHandler+0x44>)
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
    }

}
 800055e:	bf00      	nop
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	40013c00 	.word	0x40013c00
 800056c:	20000074 	.word	0x20000074
 8000570:	20000080 	.word	0x20000080
 8000574:	2000007c 	.word	0x2000007c

08000578 <SysTick_Handler>:
void delay(uint32_t ms) {
    uint32_t start = ms2;
    while ((ms2 - start) < ms);
}

void SysTick_Handler(void){
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
ms2++;
 800057c:	4b20      	ldr	r3, [pc, #128]	@ (8000600 <SysTick_Handler+0x88>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	3301      	adds	r3, #1
 8000582:	4a1f      	ldr	r2, [pc, #124]	@ (8000600 <SysTick_Handler+0x88>)
 8000584:	6013      	str	r3, [r2, #0]
if(pressed_once){
 8000586:	4b1f      	ldr	r3, [pc, #124]	@ (8000604 <SysTick_Handler+0x8c>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d033      	beq.n	80005f6 <SysTick_Handler+0x7e>
   if((GPIOA->IDR & (1<<0))!=0){
 800058e:	4b1e      	ldr	r3, [pc, #120]	@ (8000608 <SysTick_Handler+0x90>)
 8000590:	691b      	ldr	r3, [r3, #16]
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	2b00      	cmp	r3, #0
 8000598:	d00b      	beq.n	80005b2 <SysTick_Handler+0x3a>
	   debounce_counter++;
 800059a:	4b1c      	ldr	r3, [pc, #112]	@ (800060c <SysTick_Handler+0x94>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	3301      	adds	r3, #1
 80005a0:	4a1a      	ldr	r2, [pc, #104]	@ (800060c <SysTick_Handler+0x94>)
 80005a2:	6013      	str	r3, [r2, #0]
	   toggle = 1;
 80005a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000610 <SysTick_Handler+0x98>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	601a      	str	r2, [r3, #0]
	   off=0;
 80005aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000614 <SysTick_Handler+0x9c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
   }
//   button_pressed = 0;  // Reset the button pressed flag
//               debounce_counter = 0;  // Reset debounce counter
   }
}
}
 80005b0:	e021      	b.n	80005f6 <SysTick_Handler+0x7e>
	   toggle = 0;
 80005b2:	4b17      	ldr	r3, [pc, #92]	@ (8000610 <SysTick_Handler+0x98>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
	   if(!toggle){
 80005b8:	4b15      	ldr	r3, [pc, #84]	@ (8000610 <SysTick_Handler+0x98>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d104      	bne.n	80005ca <SysTick_Handler+0x52>
	  off++;
 80005c0:	4b14      	ldr	r3, [pc, #80]	@ (8000614 <SysTick_Handler+0x9c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	3301      	adds	r3, #1
 80005c6:	4a13      	ldr	r2, [pc, #76]	@ (8000614 <SysTick_Handler+0x9c>)
 80005c8:	6013      	str	r3, [r2, #0]
   if ((debounce_counter >= 20) && (off>=50)) {
 80005ca:	4b10      	ldr	r3, [pc, #64]	@ (800060c <SysTick_Handler+0x94>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2b13      	cmp	r3, #19
 80005d0:	d911      	bls.n	80005f6 <SysTick_Handler+0x7e>
 80005d2:	4b10      	ldr	r3, [pc, #64]	@ (8000614 <SysTick_Handler+0x9c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b31      	cmp	r3, #49	@ 0x31
 80005d8:	d90d      	bls.n	80005f6 <SysTick_Handler+0x7e>
	   button_press_count++;
 80005da:	4b0f      	ldr	r3, [pc, #60]	@ (8000618 <SysTick_Handler+0xa0>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	3301      	adds	r3, #1
 80005e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000618 <SysTick_Handler+0xa0>)
 80005e2:	6013      	str	r3, [r2, #0]
	   pressed_once=0;
 80005e4:	4b07      	ldr	r3, [pc, #28]	@ (8000604 <SysTick_Handler+0x8c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
	   GPIOD->ODR ^= (1 << 14);
 80005ea:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <SysTick_Handler+0xa4>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	4a0b      	ldr	r2, [pc, #44]	@ (800061c <SysTick_Handler+0xa4>)
 80005f0:	f483 4380 	eor.w	r3, r3, #16384	@ 0x4000
 80005f4:	6153      	str	r3, [r2, #20]
}
 80005f6:	bf00      	nop
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	20000088 	.word	0x20000088
 8000604:	20000080 	.word	0x20000080
 8000608:	40020000 	.word	0x40020000
 800060c:	20000078 	.word	0x20000078
 8000610:	20000084 	.word	0x20000084
 8000614:	2000007c 	.word	0x2000007c
 8000618:	20000070 	.word	0x20000070
 800061c:	40020c00 	.word	0x40020c00

08000620 <TIM2_IRQHandler>:
//            debounce_counter = 0;  // Reset debounce counter
//        }



void TIM2_IRQHandler(void){
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
    char buffer[10];
    if(TIM2->SR & (1 << 0)){
 8000626:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800062a:	691b      	ldr	r3, [r3, #16]
 800062c:	f003 0301 	and.w	r3, r3, #1
 8000630:	2b00      	cmp	r3, #0
 8000632:	d028      	beq.n	8000686 <TIM2_IRQHandler+0x66>
        TIM2->SR &= ~(1 << 0); // Clear interrupt flag
 8000634:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000638:	691b      	ldr	r3, [r3, #16]
 800063a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800063e:	f023 0301 	bic.w	r3, r3, #1
 8000642:	6113      	str	r3, [r2, #16]

        if(button_press_count == 1){
 8000644:	4b12      	ldr	r3, [pc, #72]	@ (8000690 <TIM2_IRQHandler+0x70>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d103      	bne.n	8000654 <TIM2_IRQHandler+0x34>
            USART_sendt("Hii ");
 800064c:	4811      	ldr	r0, [pc, #68]	@ (8000694 <TIM2_IRQHandler+0x74>)
 800064e:	f7ff ff4f 	bl	80004f0 <USART_sendt>
 8000652:	e015      	b.n	8000680 <TIM2_IRQHandler+0x60>
        } else if(button_press_count == 2){
 8000654:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <TIM2_IRQHandler+0x70>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b02      	cmp	r3, #2
 800065a:	d103      	bne.n	8000664 <TIM2_IRQHandler+0x44>
            USART_sendt("BYY ");
 800065c:	480e      	ldr	r0, [pc, #56]	@ (8000698 <TIM2_IRQHandler+0x78>)
 800065e:	f7ff ff47 	bl	80004f0 <USART_sendt>
 8000662:	e00d      	b.n	8000680 <TIM2_IRQHandler+0x60>
        } else {
            sprintf(buffer, "%lu", button_press_count);
 8000664:	4b0a      	ldr	r3, [pc, #40]	@ (8000690 <TIM2_IRQHandler+0x70>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	490c      	ldr	r1, [pc, #48]	@ (800069c <TIM2_IRQHandler+0x7c>)
 800066c:	4618      	mov	r0, r3
 800066e:	f000 f8d3 	bl	8000818 <siprintf>
            USART_sendt(buffer);
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ff3b 	bl	80004f0 <USART_sendt>
            USART_send(' ');
 800067a:	2020      	movs	r0, #32
 800067c:	f7ff ff20 	bl	80004c0 <USART_send>
        }
        button_press_count = 0; // Reset the button press count
 8000680:	4b03      	ldr	r3, [pc, #12]	@ (8000690 <TIM2_IRQHandler+0x70>)
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
    }
}
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000070 	.word	0x20000070
 8000694:	08001160 	.word	0x08001160
 8000698:	08001168 	.word	0x08001168
 800069c:	08001170 	.word	0x08001170

080006a0 <main>:

int main(void){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
    config_evry();
 80006a4:	f7ff fe56 	bl	8000354 <config_evry>
    config_interrupt();
 80006a8:	f7ff febe 	bl	8000428 <config_interrupt>
    timer2_config();
 80006ac:	f7ff fee2 	bl	8000474 <timer2_config>
    SysTick_Config(SystemCoreClock / 1000);  // Configure SysTick for 1ms interrupts
 80006b0:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <main+0x38>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a09      	ldr	r2, [pc, #36]	@ (80006dc <main+0x3c>)
 80006b6:	fba2 2303 	umull	r2, r3, r2, r3
 80006ba:	099b      	lsrs	r3, r3, #6
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff fe27 	bl	8000310 <SysTick_Config>
    TIM2->CR1 |= (1 << 0);  // Enable Timer 2
 80006c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6013      	str	r3, [r2, #0]

    while(1){
 80006d2:	bf00      	nop
 80006d4:	e7fd      	b.n	80006d2 <main+0x32>
 80006d6:	bf00      	nop
 80006d8:	20000000 	.word	0x20000000
 80006dc:	10624dd3 	.word	0x10624dd3

080006e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <NMI_Handler+0x4>

080006e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <HardFault_Handler+0x4>

080006f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <MemManage_Handler+0x4>

080006f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <BusFault_Handler+0x4>

08000700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <UsageFault_Handler+0x4>

08000708 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
	...

08000734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800073c:	4a14      	ldr	r2, [pc, #80]	@ (8000790 <_sbrk+0x5c>)
 800073e:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <_sbrk+0x60>)
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000748:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <_sbrk+0x64>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d102      	bne.n	8000756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000750:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <_sbrk+0x64>)
 8000752:	4a12      	ldr	r2, [pc, #72]	@ (800079c <_sbrk+0x68>)
 8000754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000756:	4b10      	ldr	r3, [pc, #64]	@ (8000798 <_sbrk+0x64>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4413      	add	r3, r2
 800075e:	693a      	ldr	r2, [r7, #16]
 8000760:	429a      	cmp	r2, r3
 8000762:	d207      	bcs.n	8000774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000764:	f000 f878 	bl	8000858 <__errno>
 8000768:	4603      	mov	r3, r0
 800076a:	220c      	movs	r2, #12
 800076c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
 8000772:	e009      	b.n	8000788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000774:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <_sbrk+0x64>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800077a:	4b07      	ldr	r3, [pc, #28]	@ (8000798 <_sbrk+0x64>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4413      	add	r3, r2
 8000782:	4a05      	ldr	r2, [pc, #20]	@ (8000798 <_sbrk+0x64>)
 8000784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000786:	68fb      	ldr	r3, [r7, #12]
}
 8000788:	4618      	mov	r0, r3
 800078a:	3718      	adds	r7, #24
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20020000 	.word	0x20020000
 8000794:	00000400 	.word	0x00000400
 8000798:	2000008c 	.word	0x2000008c
 800079c:	200001d8 	.word	0x200001d8

080007a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <SystemInit+0x20>)
 80007a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007aa:	4a05      	ldr	r2, [pc, #20]	@ (80007c0 <SystemInit+0x20>)
 80007ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80007c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007c8:	f7ff ffea 	bl	80007a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007cc:	480c      	ldr	r0, [pc, #48]	@ (8000800 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007ce:	490d      	ldr	r1, [pc, #52]	@ (8000804 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000808 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d4:	e002      	b.n	80007dc <LoopCopyDataInit>

080007d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007da:	3304      	adds	r3, #4

080007dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e0:	d3f9      	bcc.n	80007d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007e2:	4a0a      	ldr	r2, [pc, #40]	@ (800080c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000810 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e8:	e001      	b.n	80007ee <LoopFillZerobss>

080007ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007ec:	3204      	adds	r2, #4

080007ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f0:	d3fb      	bcc.n	80007ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007f2:	f000 f837 	bl	8000864 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007f6:	f7ff ff53 	bl	80006a0 <main>
  bx  lr    
 80007fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80007fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000804:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000808:	080011b8 	.word	0x080011b8
  ldr r2, =_sbss
 800080c:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000810:	200001d8 	.word	0x200001d8

08000814 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000814:	e7fe      	b.n	8000814 <ADC_IRQHandler>
	...

08000818 <siprintf>:
 8000818:	b40e      	push	{r1, r2, r3}
 800081a:	b500      	push	{lr}
 800081c:	b09c      	sub	sp, #112	@ 0x70
 800081e:	ab1d      	add	r3, sp, #116	@ 0x74
 8000820:	9002      	str	r0, [sp, #8]
 8000822:	9006      	str	r0, [sp, #24]
 8000824:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000828:	4809      	ldr	r0, [pc, #36]	@ (8000850 <siprintf+0x38>)
 800082a:	9107      	str	r1, [sp, #28]
 800082c:	9104      	str	r1, [sp, #16]
 800082e:	4909      	ldr	r1, [pc, #36]	@ (8000854 <siprintf+0x3c>)
 8000830:	f853 2b04 	ldr.w	r2, [r3], #4
 8000834:	9105      	str	r1, [sp, #20]
 8000836:	6800      	ldr	r0, [r0, #0]
 8000838:	9301      	str	r3, [sp, #4]
 800083a:	a902      	add	r1, sp, #8
 800083c:	f000 f98c 	bl	8000b58 <_svfiprintf_r>
 8000840:	9b02      	ldr	r3, [sp, #8]
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
 8000846:	b01c      	add	sp, #112	@ 0x70
 8000848:	f85d eb04 	ldr.w	lr, [sp], #4
 800084c:	b003      	add	sp, #12
 800084e:	4770      	bx	lr
 8000850:	20000004 	.word	0x20000004
 8000854:	ffff0208 	.word	0xffff0208

08000858 <__errno>:
 8000858:	4b01      	ldr	r3, [pc, #4]	@ (8000860 <__errno+0x8>)
 800085a:	6818      	ldr	r0, [r3, #0]
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	20000004 	.word	0x20000004

08000864 <__libc_init_array>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	4d0d      	ldr	r5, [pc, #52]	@ (800089c <__libc_init_array+0x38>)
 8000868:	4c0d      	ldr	r4, [pc, #52]	@ (80008a0 <__libc_init_array+0x3c>)
 800086a:	1b64      	subs	r4, r4, r5
 800086c:	10a4      	asrs	r4, r4, #2
 800086e:	2600      	movs	r6, #0
 8000870:	42a6      	cmp	r6, r4
 8000872:	d109      	bne.n	8000888 <__libc_init_array+0x24>
 8000874:	4d0b      	ldr	r5, [pc, #44]	@ (80008a4 <__libc_init_array+0x40>)
 8000876:	4c0c      	ldr	r4, [pc, #48]	@ (80008a8 <__libc_init_array+0x44>)
 8000878:	f000 fc66 	bl	8001148 <_init>
 800087c:	1b64      	subs	r4, r4, r5
 800087e:	10a4      	asrs	r4, r4, #2
 8000880:	2600      	movs	r6, #0
 8000882:	42a6      	cmp	r6, r4
 8000884:	d105      	bne.n	8000892 <__libc_init_array+0x2e>
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	f855 3b04 	ldr.w	r3, [r5], #4
 800088c:	4798      	blx	r3
 800088e:	3601      	adds	r6, #1
 8000890:	e7ee      	b.n	8000870 <__libc_init_array+0xc>
 8000892:	f855 3b04 	ldr.w	r3, [r5], #4
 8000896:	4798      	blx	r3
 8000898:	3601      	adds	r6, #1
 800089a:	e7f2      	b.n	8000882 <__libc_init_array+0x1e>
 800089c:	080011b0 	.word	0x080011b0
 80008a0:	080011b0 	.word	0x080011b0
 80008a4:	080011b0 	.word	0x080011b0
 80008a8:	080011b4 	.word	0x080011b4

080008ac <__retarget_lock_acquire_recursive>:
 80008ac:	4770      	bx	lr

080008ae <__retarget_lock_release_recursive>:
 80008ae:	4770      	bx	lr

080008b0 <_free_r>:
 80008b0:	b538      	push	{r3, r4, r5, lr}
 80008b2:	4605      	mov	r5, r0
 80008b4:	2900      	cmp	r1, #0
 80008b6:	d041      	beq.n	800093c <_free_r+0x8c>
 80008b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80008bc:	1f0c      	subs	r4, r1, #4
 80008be:	2b00      	cmp	r3, #0
 80008c0:	bfb8      	it	lt
 80008c2:	18e4      	addlt	r4, r4, r3
 80008c4:	f000 f8e0 	bl	8000a88 <__malloc_lock>
 80008c8:	4a1d      	ldr	r2, [pc, #116]	@ (8000940 <_free_r+0x90>)
 80008ca:	6813      	ldr	r3, [r2, #0]
 80008cc:	b933      	cbnz	r3, 80008dc <_free_r+0x2c>
 80008ce:	6063      	str	r3, [r4, #4]
 80008d0:	6014      	str	r4, [r2, #0]
 80008d2:	4628      	mov	r0, r5
 80008d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80008d8:	f000 b8dc 	b.w	8000a94 <__malloc_unlock>
 80008dc:	42a3      	cmp	r3, r4
 80008de:	d908      	bls.n	80008f2 <_free_r+0x42>
 80008e0:	6820      	ldr	r0, [r4, #0]
 80008e2:	1821      	adds	r1, r4, r0
 80008e4:	428b      	cmp	r3, r1
 80008e6:	bf01      	itttt	eq
 80008e8:	6819      	ldreq	r1, [r3, #0]
 80008ea:	685b      	ldreq	r3, [r3, #4]
 80008ec:	1809      	addeq	r1, r1, r0
 80008ee:	6021      	streq	r1, [r4, #0]
 80008f0:	e7ed      	b.n	80008ce <_free_r+0x1e>
 80008f2:	461a      	mov	r2, r3
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	b10b      	cbz	r3, 80008fc <_free_r+0x4c>
 80008f8:	42a3      	cmp	r3, r4
 80008fa:	d9fa      	bls.n	80008f2 <_free_r+0x42>
 80008fc:	6811      	ldr	r1, [r2, #0]
 80008fe:	1850      	adds	r0, r2, r1
 8000900:	42a0      	cmp	r0, r4
 8000902:	d10b      	bne.n	800091c <_free_r+0x6c>
 8000904:	6820      	ldr	r0, [r4, #0]
 8000906:	4401      	add	r1, r0
 8000908:	1850      	adds	r0, r2, r1
 800090a:	4283      	cmp	r3, r0
 800090c:	6011      	str	r1, [r2, #0]
 800090e:	d1e0      	bne.n	80008d2 <_free_r+0x22>
 8000910:	6818      	ldr	r0, [r3, #0]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	6053      	str	r3, [r2, #4]
 8000916:	4408      	add	r0, r1
 8000918:	6010      	str	r0, [r2, #0]
 800091a:	e7da      	b.n	80008d2 <_free_r+0x22>
 800091c:	d902      	bls.n	8000924 <_free_r+0x74>
 800091e:	230c      	movs	r3, #12
 8000920:	602b      	str	r3, [r5, #0]
 8000922:	e7d6      	b.n	80008d2 <_free_r+0x22>
 8000924:	6820      	ldr	r0, [r4, #0]
 8000926:	1821      	adds	r1, r4, r0
 8000928:	428b      	cmp	r3, r1
 800092a:	bf04      	itt	eq
 800092c:	6819      	ldreq	r1, [r3, #0]
 800092e:	685b      	ldreq	r3, [r3, #4]
 8000930:	6063      	str	r3, [r4, #4]
 8000932:	bf04      	itt	eq
 8000934:	1809      	addeq	r1, r1, r0
 8000936:	6021      	streq	r1, [r4, #0]
 8000938:	6054      	str	r4, [r2, #4]
 800093a:	e7ca      	b.n	80008d2 <_free_r+0x22>
 800093c:	bd38      	pop	{r3, r4, r5, pc}
 800093e:	bf00      	nop
 8000940:	200001d4 	.word	0x200001d4

08000944 <sbrk_aligned>:
 8000944:	b570      	push	{r4, r5, r6, lr}
 8000946:	4e0f      	ldr	r6, [pc, #60]	@ (8000984 <sbrk_aligned+0x40>)
 8000948:	460c      	mov	r4, r1
 800094a:	6831      	ldr	r1, [r6, #0]
 800094c:	4605      	mov	r5, r0
 800094e:	b911      	cbnz	r1, 8000956 <sbrk_aligned+0x12>
 8000950:	f000 fba6 	bl	80010a0 <_sbrk_r>
 8000954:	6030      	str	r0, [r6, #0]
 8000956:	4621      	mov	r1, r4
 8000958:	4628      	mov	r0, r5
 800095a:	f000 fba1 	bl	80010a0 <_sbrk_r>
 800095e:	1c43      	adds	r3, r0, #1
 8000960:	d103      	bne.n	800096a <sbrk_aligned+0x26>
 8000962:	f04f 34ff 	mov.w	r4, #4294967295
 8000966:	4620      	mov	r0, r4
 8000968:	bd70      	pop	{r4, r5, r6, pc}
 800096a:	1cc4      	adds	r4, r0, #3
 800096c:	f024 0403 	bic.w	r4, r4, #3
 8000970:	42a0      	cmp	r0, r4
 8000972:	d0f8      	beq.n	8000966 <sbrk_aligned+0x22>
 8000974:	1a21      	subs	r1, r4, r0
 8000976:	4628      	mov	r0, r5
 8000978:	f000 fb92 	bl	80010a0 <_sbrk_r>
 800097c:	3001      	adds	r0, #1
 800097e:	d1f2      	bne.n	8000966 <sbrk_aligned+0x22>
 8000980:	e7ef      	b.n	8000962 <sbrk_aligned+0x1e>
 8000982:	bf00      	nop
 8000984:	200001d0 	.word	0x200001d0

08000988 <_malloc_r>:
 8000988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800098c:	1ccd      	adds	r5, r1, #3
 800098e:	f025 0503 	bic.w	r5, r5, #3
 8000992:	3508      	adds	r5, #8
 8000994:	2d0c      	cmp	r5, #12
 8000996:	bf38      	it	cc
 8000998:	250c      	movcc	r5, #12
 800099a:	2d00      	cmp	r5, #0
 800099c:	4606      	mov	r6, r0
 800099e:	db01      	blt.n	80009a4 <_malloc_r+0x1c>
 80009a0:	42a9      	cmp	r1, r5
 80009a2:	d904      	bls.n	80009ae <_malloc_r+0x26>
 80009a4:	230c      	movs	r3, #12
 80009a6:	6033      	str	r3, [r6, #0]
 80009a8:	2000      	movs	r0, #0
 80009aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000a84 <_malloc_r+0xfc>
 80009b2:	f000 f869 	bl	8000a88 <__malloc_lock>
 80009b6:	f8d8 3000 	ldr.w	r3, [r8]
 80009ba:	461c      	mov	r4, r3
 80009bc:	bb44      	cbnz	r4, 8000a10 <_malloc_r+0x88>
 80009be:	4629      	mov	r1, r5
 80009c0:	4630      	mov	r0, r6
 80009c2:	f7ff ffbf 	bl	8000944 <sbrk_aligned>
 80009c6:	1c43      	adds	r3, r0, #1
 80009c8:	4604      	mov	r4, r0
 80009ca:	d158      	bne.n	8000a7e <_malloc_r+0xf6>
 80009cc:	f8d8 4000 	ldr.w	r4, [r8]
 80009d0:	4627      	mov	r7, r4
 80009d2:	2f00      	cmp	r7, #0
 80009d4:	d143      	bne.n	8000a5e <_malloc_r+0xd6>
 80009d6:	2c00      	cmp	r4, #0
 80009d8:	d04b      	beq.n	8000a72 <_malloc_r+0xea>
 80009da:	6823      	ldr	r3, [r4, #0]
 80009dc:	4639      	mov	r1, r7
 80009de:	4630      	mov	r0, r6
 80009e0:	eb04 0903 	add.w	r9, r4, r3
 80009e4:	f000 fb5c 	bl	80010a0 <_sbrk_r>
 80009e8:	4581      	cmp	r9, r0
 80009ea:	d142      	bne.n	8000a72 <_malloc_r+0xea>
 80009ec:	6821      	ldr	r1, [r4, #0]
 80009ee:	1a6d      	subs	r5, r5, r1
 80009f0:	4629      	mov	r1, r5
 80009f2:	4630      	mov	r0, r6
 80009f4:	f7ff ffa6 	bl	8000944 <sbrk_aligned>
 80009f8:	3001      	adds	r0, #1
 80009fa:	d03a      	beq.n	8000a72 <_malloc_r+0xea>
 80009fc:	6823      	ldr	r3, [r4, #0]
 80009fe:	442b      	add	r3, r5
 8000a00:	6023      	str	r3, [r4, #0]
 8000a02:	f8d8 3000 	ldr.w	r3, [r8]
 8000a06:	685a      	ldr	r2, [r3, #4]
 8000a08:	bb62      	cbnz	r2, 8000a64 <_malloc_r+0xdc>
 8000a0a:	f8c8 7000 	str.w	r7, [r8]
 8000a0e:	e00f      	b.n	8000a30 <_malloc_r+0xa8>
 8000a10:	6822      	ldr	r2, [r4, #0]
 8000a12:	1b52      	subs	r2, r2, r5
 8000a14:	d420      	bmi.n	8000a58 <_malloc_r+0xd0>
 8000a16:	2a0b      	cmp	r2, #11
 8000a18:	d917      	bls.n	8000a4a <_malloc_r+0xc2>
 8000a1a:	1961      	adds	r1, r4, r5
 8000a1c:	42a3      	cmp	r3, r4
 8000a1e:	6025      	str	r5, [r4, #0]
 8000a20:	bf18      	it	ne
 8000a22:	6059      	strne	r1, [r3, #4]
 8000a24:	6863      	ldr	r3, [r4, #4]
 8000a26:	bf08      	it	eq
 8000a28:	f8c8 1000 	streq.w	r1, [r8]
 8000a2c:	5162      	str	r2, [r4, r5]
 8000a2e:	604b      	str	r3, [r1, #4]
 8000a30:	4630      	mov	r0, r6
 8000a32:	f000 f82f 	bl	8000a94 <__malloc_unlock>
 8000a36:	f104 000b 	add.w	r0, r4, #11
 8000a3a:	1d23      	adds	r3, r4, #4
 8000a3c:	f020 0007 	bic.w	r0, r0, #7
 8000a40:	1ac2      	subs	r2, r0, r3
 8000a42:	bf1c      	itt	ne
 8000a44:	1a1b      	subne	r3, r3, r0
 8000a46:	50a3      	strne	r3, [r4, r2]
 8000a48:	e7af      	b.n	80009aa <_malloc_r+0x22>
 8000a4a:	6862      	ldr	r2, [r4, #4]
 8000a4c:	42a3      	cmp	r3, r4
 8000a4e:	bf0c      	ite	eq
 8000a50:	f8c8 2000 	streq.w	r2, [r8]
 8000a54:	605a      	strne	r2, [r3, #4]
 8000a56:	e7eb      	b.n	8000a30 <_malloc_r+0xa8>
 8000a58:	4623      	mov	r3, r4
 8000a5a:	6864      	ldr	r4, [r4, #4]
 8000a5c:	e7ae      	b.n	80009bc <_malloc_r+0x34>
 8000a5e:	463c      	mov	r4, r7
 8000a60:	687f      	ldr	r7, [r7, #4]
 8000a62:	e7b6      	b.n	80009d2 <_malloc_r+0x4a>
 8000a64:	461a      	mov	r2, r3
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	42a3      	cmp	r3, r4
 8000a6a:	d1fb      	bne.n	8000a64 <_malloc_r+0xdc>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	6053      	str	r3, [r2, #4]
 8000a70:	e7de      	b.n	8000a30 <_malloc_r+0xa8>
 8000a72:	230c      	movs	r3, #12
 8000a74:	6033      	str	r3, [r6, #0]
 8000a76:	4630      	mov	r0, r6
 8000a78:	f000 f80c 	bl	8000a94 <__malloc_unlock>
 8000a7c:	e794      	b.n	80009a8 <_malloc_r+0x20>
 8000a7e:	6005      	str	r5, [r0, #0]
 8000a80:	e7d6      	b.n	8000a30 <_malloc_r+0xa8>
 8000a82:	bf00      	nop
 8000a84:	200001d4 	.word	0x200001d4

08000a88 <__malloc_lock>:
 8000a88:	4801      	ldr	r0, [pc, #4]	@ (8000a90 <__malloc_lock+0x8>)
 8000a8a:	f7ff bf0f 	b.w	80008ac <__retarget_lock_acquire_recursive>
 8000a8e:	bf00      	nop
 8000a90:	200001cc 	.word	0x200001cc

08000a94 <__malloc_unlock>:
 8000a94:	4801      	ldr	r0, [pc, #4]	@ (8000a9c <__malloc_unlock+0x8>)
 8000a96:	f7ff bf0a 	b.w	80008ae <__retarget_lock_release_recursive>
 8000a9a:	bf00      	nop
 8000a9c:	200001cc 	.word	0x200001cc

08000aa0 <__ssputs_r>:
 8000aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa4:	688e      	ldr	r6, [r1, #8]
 8000aa6:	461f      	mov	r7, r3
 8000aa8:	42be      	cmp	r6, r7
 8000aaa:	680b      	ldr	r3, [r1, #0]
 8000aac:	4682      	mov	sl, r0
 8000aae:	460c      	mov	r4, r1
 8000ab0:	4690      	mov	r8, r2
 8000ab2:	d82d      	bhi.n	8000b10 <__ssputs_r+0x70>
 8000ab4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000ab8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000abc:	d026      	beq.n	8000b0c <__ssputs_r+0x6c>
 8000abe:	6965      	ldr	r5, [r4, #20]
 8000ac0:	6909      	ldr	r1, [r1, #16]
 8000ac2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000ac6:	eba3 0901 	sub.w	r9, r3, r1
 8000aca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000ace:	1c7b      	adds	r3, r7, #1
 8000ad0:	444b      	add	r3, r9
 8000ad2:	106d      	asrs	r5, r5, #1
 8000ad4:	429d      	cmp	r5, r3
 8000ad6:	bf38      	it	cc
 8000ad8:	461d      	movcc	r5, r3
 8000ada:	0553      	lsls	r3, r2, #21
 8000adc:	d527      	bpl.n	8000b2e <__ssputs_r+0x8e>
 8000ade:	4629      	mov	r1, r5
 8000ae0:	f7ff ff52 	bl	8000988 <_malloc_r>
 8000ae4:	4606      	mov	r6, r0
 8000ae6:	b360      	cbz	r0, 8000b42 <__ssputs_r+0xa2>
 8000ae8:	6921      	ldr	r1, [r4, #16]
 8000aea:	464a      	mov	r2, r9
 8000aec:	f000 fae8 	bl	80010c0 <memcpy>
 8000af0:	89a3      	ldrh	r3, [r4, #12]
 8000af2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000af6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000afa:	81a3      	strh	r3, [r4, #12]
 8000afc:	6126      	str	r6, [r4, #16]
 8000afe:	6165      	str	r5, [r4, #20]
 8000b00:	444e      	add	r6, r9
 8000b02:	eba5 0509 	sub.w	r5, r5, r9
 8000b06:	6026      	str	r6, [r4, #0]
 8000b08:	60a5      	str	r5, [r4, #8]
 8000b0a:	463e      	mov	r6, r7
 8000b0c:	42be      	cmp	r6, r7
 8000b0e:	d900      	bls.n	8000b12 <__ssputs_r+0x72>
 8000b10:	463e      	mov	r6, r7
 8000b12:	6820      	ldr	r0, [r4, #0]
 8000b14:	4632      	mov	r2, r6
 8000b16:	4641      	mov	r1, r8
 8000b18:	f000 faa8 	bl	800106c <memmove>
 8000b1c:	68a3      	ldr	r3, [r4, #8]
 8000b1e:	1b9b      	subs	r3, r3, r6
 8000b20:	60a3      	str	r3, [r4, #8]
 8000b22:	6823      	ldr	r3, [r4, #0]
 8000b24:	4433      	add	r3, r6
 8000b26:	6023      	str	r3, [r4, #0]
 8000b28:	2000      	movs	r0, #0
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	462a      	mov	r2, r5
 8000b30:	f000 fad4 	bl	80010dc <_realloc_r>
 8000b34:	4606      	mov	r6, r0
 8000b36:	2800      	cmp	r0, #0
 8000b38:	d1e0      	bne.n	8000afc <__ssputs_r+0x5c>
 8000b3a:	6921      	ldr	r1, [r4, #16]
 8000b3c:	4650      	mov	r0, sl
 8000b3e:	f7ff feb7 	bl	80008b0 <_free_r>
 8000b42:	230c      	movs	r3, #12
 8000b44:	f8ca 3000 	str.w	r3, [sl]
 8000b48:	89a3      	ldrh	r3, [r4, #12]
 8000b4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b4e:	81a3      	strh	r3, [r4, #12]
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	e7e9      	b.n	8000b2a <__ssputs_r+0x8a>
	...

08000b58 <_svfiprintf_r>:
 8000b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b5c:	4698      	mov	r8, r3
 8000b5e:	898b      	ldrh	r3, [r1, #12]
 8000b60:	061b      	lsls	r3, r3, #24
 8000b62:	b09d      	sub	sp, #116	@ 0x74
 8000b64:	4607      	mov	r7, r0
 8000b66:	460d      	mov	r5, r1
 8000b68:	4614      	mov	r4, r2
 8000b6a:	d510      	bpl.n	8000b8e <_svfiprintf_r+0x36>
 8000b6c:	690b      	ldr	r3, [r1, #16]
 8000b6e:	b973      	cbnz	r3, 8000b8e <_svfiprintf_r+0x36>
 8000b70:	2140      	movs	r1, #64	@ 0x40
 8000b72:	f7ff ff09 	bl	8000988 <_malloc_r>
 8000b76:	6028      	str	r0, [r5, #0]
 8000b78:	6128      	str	r0, [r5, #16]
 8000b7a:	b930      	cbnz	r0, 8000b8a <_svfiprintf_r+0x32>
 8000b7c:	230c      	movs	r3, #12
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	b01d      	add	sp, #116	@ 0x74
 8000b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b8a:	2340      	movs	r3, #64	@ 0x40
 8000b8c:	616b      	str	r3, [r5, #20]
 8000b8e:	2300      	movs	r3, #0
 8000b90:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b92:	2320      	movs	r3, #32
 8000b94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000b98:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b9c:	2330      	movs	r3, #48	@ 0x30
 8000b9e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000d3c <_svfiprintf_r+0x1e4>
 8000ba2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000ba6:	f04f 0901 	mov.w	r9, #1
 8000baa:	4623      	mov	r3, r4
 8000bac:	469a      	mov	sl, r3
 8000bae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000bb2:	b10a      	cbz	r2, 8000bb8 <_svfiprintf_r+0x60>
 8000bb4:	2a25      	cmp	r2, #37	@ 0x25
 8000bb6:	d1f9      	bne.n	8000bac <_svfiprintf_r+0x54>
 8000bb8:	ebba 0b04 	subs.w	fp, sl, r4
 8000bbc:	d00b      	beq.n	8000bd6 <_svfiprintf_r+0x7e>
 8000bbe:	465b      	mov	r3, fp
 8000bc0:	4622      	mov	r2, r4
 8000bc2:	4629      	mov	r1, r5
 8000bc4:	4638      	mov	r0, r7
 8000bc6:	f7ff ff6b 	bl	8000aa0 <__ssputs_r>
 8000bca:	3001      	adds	r0, #1
 8000bcc:	f000 80a7 	beq.w	8000d1e <_svfiprintf_r+0x1c6>
 8000bd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000bd2:	445a      	add	r2, fp
 8000bd4:	9209      	str	r2, [sp, #36]	@ 0x24
 8000bd6:	f89a 3000 	ldrb.w	r3, [sl]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f000 809f 	beq.w	8000d1e <_svfiprintf_r+0x1c6>
 8000be0:	2300      	movs	r3, #0
 8000be2:	f04f 32ff 	mov.w	r2, #4294967295
 8000be6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000bea:	f10a 0a01 	add.w	sl, sl, #1
 8000bee:	9304      	str	r3, [sp, #16]
 8000bf0:	9307      	str	r3, [sp, #28]
 8000bf2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000bf6:	931a      	str	r3, [sp, #104]	@ 0x68
 8000bf8:	4654      	mov	r4, sl
 8000bfa:	2205      	movs	r2, #5
 8000bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c00:	484e      	ldr	r0, [pc, #312]	@ (8000d3c <_svfiprintf_r+0x1e4>)
 8000c02:	f7ff faed 	bl	80001e0 <memchr>
 8000c06:	9a04      	ldr	r2, [sp, #16]
 8000c08:	b9d8      	cbnz	r0, 8000c42 <_svfiprintf_r+0xea>
 8000c0a:	06d0      	lsls	r0, r2, #27
 8000c0c:	bf44      	itt	mi
 8000c0e:	2320      	movmi	r3, #32
 8000c10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000c14:	0711      	lsls	r1, r2, #28
 8000c16:	bf44      	itt	mi
 8000c18:	232b      	movmi	r3, #43	@ 0x2b
 8000c1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000c1e:	f89a 3000 	ldrb.w	r3, [sl]
 8000c22:	2b2a      	cmp	r3, #42	@ 0x2a
 8000c24:	d015      	beq.n	8000c52 <_svfiprintf_r+0xfa>
 8000c26:	9a07      	ldr	r2, [sp, #28]
 8000c28:	4654      	mov	r4, sl
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f04f 0c0a 	mov.w	ip, #10
 8000c30:	4621      	mov	r1, r4
 8000c32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c36:	3b30      	subs	r3, #48	@ 0x30
 8000c38:	2b09      	cmp	r3, #9
 8000c3a:	d94b      	bls.n	8000cd4 <_svfiprintf_r+0x17c>
 8000c3c:	b1b0      	cbz	r0, 8000c6c <_svfiprintf_r+0x114>
 8000c3e:	9207      	str	r2, [sp, #28]
 8000c40:	e014      	b.n	8000c6c <_svfiprintf_r+0x114>
 8000c42:	eba0 0308 	sub.w	r3, r0, r8
 8000c46:	fa09 f303 	lsl.w	r3, r9, r3
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	9304      	str	r3, [sp, #16]
 8000c4e:	46a2      	mov	sl, r4
 8000c50:	e7d2      	b.n	8000bf8 <_svfiprintf_r+0xa0>
 8000c52:	9b03      	ldr	r3, [sp, #12]
 8000c54:	1d19      	adds	r1, r3, #4
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	9103      	str	r1, [sp, #12]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	bfbb      	ittet	lt
 8000c5e:	425b      	neglt	r3, r3
 8000c60:	f042 0202 	orrlt.w	r2, r2, #2
 8000c64:	9307      	strge	r3, [sp, #28]
 8000c66:	9307      	strlt	r3, [sp, #28]
 8000c68:	bfb8      	it	lt
 8000c6a:	9204      	strlt	r2, [sp, #16]
 8000c6c:	7823      	ldrb	r3, [r4, #0]
 8000c6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8000c70:	d10a      	bne.n	8000c88 <_svfiprintf_r+0x130>
 8000c72:	7863      	ldrb	r3, [r4, #1]
 8000c74:	2b2a      	cmp	r3, #42	@ 0x2a
 8000c76:	d132      	bne.n	8000cde <_svfiprintf_r+0x186>
 8000c78:	9b03      	ldr	r3, [sp, #12]
 8000c7a:	1d1a      	adds	r2, r3, #4
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	9203      	str	r2, [sp, #12]
 8000c80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000c84:	3402      	adds	r4, #2
 8000c86:	9305      	str	r3, [sp, #20]
 8000c88:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000d4c <_svfiprintf_r+0x1f4>
 8000c8c:	7821      	ldrb	r1, [r4, #0]
 8000c8e:	2203      	movs	r2, #3
 8000c90:	4650      	mov	r0, sl
 8000c92:	f7ff faa5 	bl	80001e0 <memchr>
 8000c96:	b138      	cbz	r0, 8000ca8 <_svfiprintf_r+0x150>
 8000c98:	9b04      	ldr	r3, [sp, #16]
 8000c9a:	eba0 000a 	sub.w	r0, r0, sl
 8000c9e:	2240      	movs	r2, #64	@ 0x40
 8000ca0:	4082      	lsls	r2, r0
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	3401      	adds	r4, #1
 8000ca6:	9304      	str	r3, [sp, #16]
 8000ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cac:	4824      	ldr	r0, [pc, #144]	@ (8000d40 <_svfiprintf_r+0x1e8>)
 8000cae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000cb2:	2206      	movs	r2, #6
 8000cb4:	f7ff fa94 	bl	80001e0 <memchr>
 8000cb8:	2800      	cmp	r0, #0
 8000cba:	d036      	beq.n	8000d2a <_svfiprintf_r+0x1d2>
 8000cbc:	4b21      	ldr	r3, [pc, #132]	@ (8000d44 <_svfiprintf_r+0x1ec>)
 8000cbe:	bb1b      	cbnz	r3, 8000d08 <_svfiprintf_r+0x1b0>
 8000cc0:	9b03      	ldr	r3, [sp, #12]
 8000cc2:	3307      	adds	r3, #7
 8000cc4:	f023 0307 	bic.w	r3, r3, #7
 8000cc8:	3308      	adds	r3, #8
 8000cca:	9303      	str	r3, [sp, #12]
 8000ccc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000cce:	4433      	add	r3, r6
 8000cd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8000cd2:	e76a      	b.n	8000baa <_svfiprintf_r+0x52>
 8000cd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8000cd8:	460c      	mov	r4, r1
 8000cda:	2001      	movs	r0, #1
 8000cdc:	e7a8      	b.n	8000c30 <_svfiprintf_r+0xd8>
 8000cde:	2300      	movs	r3, #0
 8000ce0:	3401      	adds	r4, #1
 8000ce2:	9305      	str	r3, [sp, #20]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f04f 0c0a 	mov.w	ip, #10
 8000cea:	4620      	mov	r0, r4
 8000cec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000cf0:	3a30      	subs	r2, #48	@ 0x30
 8000cf2:	2a09      	cmp	r2, #9
 8000cf4:	d903      	bls.n	8000cfe <_svfiprintf_r+0x1a6>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d0c6      	beq.n	8000c88 <_svfiprintf_r+0x130>
 8000cfa:	9105      	str	r1, [sp, #20]
 8000cfc:	e7c4      	b.n	8000c88 <_svfiprintf_r+0x130>
 8000cfe:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d02:	4604      	mov	r4, r0
 8000d04:	2301      	movs	r3, #1
 8000d06:	e7f0      	b.n	8000cea <_svfiprintf_r+0x192>
 8000d08:	ab03      	add	r3, sp, #12
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	462a      	mov	r2, r5
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <_svfiprintf_r+0x1f0>)
 8000d10:	a904      	add	r1, sp, #16
 8000d12:	4638      	mov	r0, r7
 8000d14:	f3af 8000 	nop.w
 8000d18:	1c42      	adds	r2, r0, #1
 8000d1a:	4606      	mov	r6, r0
 8000d1c:	d1d6      	bne.n	8000ccc <_svfiprintf_r+0x174>
 8000d1e:	89ab      	ldrh	r3, [r5, #12]
 8000d20:	065b      	lsls	r3, r3, #25
 8000d22:	f53f af2d 	bmi.w	8000b80 <_svfiprintf_r+0x28>
 8000d26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000d28:	e72c      	b.n	8000b84 <_svfiprintf_r+0x2c>
 8000d2a:	ab03      	add	r3, sp, #12
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	462a      	mov	r2, r5
 8000d30:	4b05      	ldr	r3, [pc, #20]	@ (8000d48 <_svfiprintf_r+0x1f0>)
 8000d32:	a904      	add	r1, sp, #16
 8000d34:	4638      	mov	r0, r7
 8000d36:	f000 f879 	bl	8000e2c <_printf_i>
 8000d3a:	e7ed      	b.n	8000d18 <_svfiprintf_r+0x1c0>
 8000d3c:	08001174 	.word	0x08001174
 8000d40:	0800117e 	.word	0x0800117e
 8000d44:	00000000 	.word	0x00000000
 8000d48:	08000aa1 	.word	0x08000aa1
 8000d4c:	0800117a 	.word	0x0800117a

08000d50 <_printf_common>:
 8000d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d54:	4616      	mov	r6, r2
 8000d56:	4698      	mov	r8, r3
 8000d58:	688a      	ldr	r2, [r1, #8]
 8000d5a:	690b      	ldr	r3, [r1, #16]
 8000d5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000d60:	4293      	cmp	r3, r2
 8000d62:	bfb8      	it	lt
 8000d64:	4613      	movlt	r3, r2
 8000d66:	6033      	str	r3, [r6, #0]
 8000d68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000d6c:	4607      	mov	r7, r0
 8000d6e:	460c      	mov	r4, r1
 8000d70:	b10a      	cbz	r2, 8000d76 <_printf_common+0x26>
 8000d72:	3301      	adds	r3, #1
 8000d74:	6033      	str	r3, [r6, #0]
 8000d76:	6823      	ldr	r3, [r4, #0]
 8000d78:	0699      	lsls	r1, r3, #26
 8000d7a:	bf42      	ittt	mi
 8000d7c:	6833      	ldrmi	r3, [r6, #0]
 8000d7e:	3302      	addmi	r3, #2
 8000d80:	6033      	strmi	r3, [r6, #0]
 8000d82:	6825      	ldr	r5, [r4, #0]
 8000d84:	f015 0506 	ands.w	r5, r5, #6
 8000d88:	d106      	bne.n	8000d98 <_printf_common+0x48>
 8000d8a:	f104 0a19 	add.w	sl, r4, #25
 8000d8e:	68e3      	ldr	r3, [r4, #12]
 8000d90:	6832      	ldr	r2, [r6, #0]
 8000d92:	1a9b      	subs	r3, r3, r2
 8000d94:	42ab      	cmp	r3, r5
 8000d96:	dc26      	bgt.n	8000de6 <_printf_common+0x96>
 8000d98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000d9c:	6822      	ldr	r2, [r4, #0]
 8000d9e:	3b00      	subs	r3, #0
 8000da0:	bf18      	it	ne
 8000da2:	2301      	movne	r3, #1
 8000da4:	0692      	lsls	r2, r2, #26
 8000da6:	d42b      	bmi.n	8000e00 <_printf_common+0xb0>
 8000da8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000dac:	4641      	mov	r1, r8
 8000dae:	4638      	mov	r0, r7
 8000db0:	47c8      	blx	r9
 8000db2:	3001      	adds	r0, #1
 8000db4:	d01e      	beq.n	8000df4 <_printf_common+0xa4>
 8000db6:	6823      	ldr	r3, [r4, #0]
 8000db8:	6922      	ldr	r2, [r4, #16]
 8000dba:	f003 0306 	and.w	r3, r3, #6
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	bf02      	ittt	eq
 8000dc2:	68e5      	ldreq	r5, [r4, #12]
 8000dc4:	6833      	ldreq	r3, [r6, #0]
 8000dc6:	1aed      	subeq	r5, r5, r3
 8000dc8:	68a3      	ldr	r3, [r4, #8]
 8000dca:	bf0c      	ite	eq
 8000dcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000dd0:	2500      	movne	r5, #0
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	bfc4      	itt	gt
 8000dd6:	1a9b      	subgt	r3, r3, r2
 8000dd8:	18ed      	addgt	r5, r5, r3
 8000dda:	2600      	movs	r6, #0
 8000ddc:	341a      	adds	r4, #26
 8000dde:	42b5      	cmp	r5, r6
 8000de0:	d11a      	bne.n	8000e18 <_printf_common+0xc8>
 8000de2:	2000      	movs	r0, #0
 8000de4:	e008      	b.n	8000df8 <_printf_common+0xa8>
 8000de6:	2301      	movs	r3, #1
 8000de8:	4652      	mov	r2, sl
 8000dea:	4641      	mov	r1, r8
 8000dec:	4638      	mov	r0, r7
 8000dee:	47c8      	blx	r9
 8000df0:	3001      	adds	r0, #1
 8000df2:	d103      	bne.n	8000dfc <_printf_common+0xac>
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295
 8000df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfc:	3501      	adds	r5, #1
 8000dfe:	e7c6      	b.n	8000d8e <_printf_common+0x3e>
 8000e00:	18e1      	adds	r1, r4, r3
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	2030      	movs	r0, #48	@ 0x30
 8000e06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000e0a:	4422      	add	r2, r4
 8000e0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000e10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000e14:	3302      	adds	r3, #2
 8000e16:	e7c7      	b.n	8000da8 <_printf_common+0x58>
 8000e18:	2301      	movs	r3, #1
 8000e1a:	4622      	mov	r2, r4
 8000e1c:	4641      	mov	r1, r8
 8000e1e:	4638      	mov	r0, r7
 8000e20:	47c8      	blx	r9
 8000e22:	3001      	adds	r0, #1
 8000e24:	d0e6      	beq.n	8000df4 <_printf_common+0xa4>
 8000e26:	3601      	adds	r6, #1
 8000e28:	e7d9      	b.n	8000dde <_printf_common+0x8e>
	...

08000e2c <_printf_i>:
 8000e2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e30:	7e0f      	ldrb	r7, [r1, #24]
 8000e32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000e34:	2f78      	cmp	r7, #120	@ 0x78
 8000e36:	4691      	mov	r9, r2
 8000e38:	4680      	mov	r8, r0
 8000e3a:	460c      	mov	r4, r1
 8000e3c:	469a      	mov	sl, r3
 8000e3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000e42:	d807      	bhi.n	8000e54 <_printf_i+0x28>
 8000e44:	2f62      	cmp	r7, #98	@ 0x62
 8000e46:	d80a      	bhi.n	8000e5e <_printf_i+0x32>
 8000e48:	2f00      	cmp	r7, #0
 8000e4a:	f000 80d2 	beq.w	8000ff2 <_printf_i+0x1c6>
 8000e4e:	2f58      	cmp	r7, #88	@ 0x58
 8000e50:	f000 80b9 	beq.w	8000fc6 <_printf_i+0x19a>
 8000e54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000e5c:	e03a      	b.n	8000ed4 <_printf_i+0xa8>
 8000e5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000e62:	2b15      	cmp	r3, #21
 8000e64:	d8f6      	bhi.n	8000e54 <_printf_i+0x28>
 8000e66:	a101      	add	r1, pc, #4	@ (adr r1, 8000e6c <_printf_i+0x40>)
 8000e68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000e6c:	08000ec5 	.word	0x08000ec5
 8000e70:	08000ed9 	.word	0x08000ed9
 8000e74:	08000e55 	.word	0x08000e55
 8000e78:	08000e55 	.word	0x08000e55
 8000e7c:	08000e55 	.word	0x08000e55
 8000e80:	08000e55 	.word	0x08000e55
 8000e84:	08000ed9 	.word	0x08000ed9
 8000e88:	08000e55 	.word	0x08000e55
 8000e8c:	08000e55 	.word	0x08000e55
 8000e90:	08000e55 	.word	0x08000e55
 8000e94:	08000e55 	.word	0x08000e55
 8000e98:	08000fd9 	.word	0x08000fd9
 8000e9c:	08000f03 	.word	0x08000f03
 8000ea0:	08000f93 	.word	0x08000f93
 8000ea4:	08000e55 	.word	0x08000e55
 8000ea8:	08000e55 	.word	0x08000e55
 8000eac:	08000ffb 	.word	0x08000ffb
 8000eb0:	08000e55 	.word	0x08000e55
 8000eb4:	08000f03 	.word	0x08000f03
 8000eb8:	08000e55 	.word	0x08000e55
 8000ebc:	08000e55 	.word	0x08000e55
 8000ec0:	08000f9b 	.word	0x08000f9b
 8000ec4:	6833      	ldr	r3, [r6, #0]
 8000ec6:	1d1a      	adds	r2, r3, #4
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	6032      	str	r2, [r6, #0]
 8000ecc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000ed0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e09d      	b.n	8001014 <_printf_i+0x1e8>
 8000ed8:	6833      	ldr	r3, [r6, #0]
 8000eda:	6820      	ldr	r0, [r4, #0]
 8000edc:	1d19      	adds	r1, r3, #4
 8000ede:	6031      	str	r1, [r6, #0]
 8000ee0:	0606      	lsls	r6, r0, #24
 8000ee2:	d501      	bpl.n	8000ee8 <_printf_i+0xbc>
 8000ee4:	681d      	ldr	r5, [r3, #0]
 8000ee6:	e003      	b.n	8000ef0 <_printf_i+0xc4>
 8000ee8:	0645      	lsls	r5, r0, #25
 8000eea:	d5fb      	bpl.n	8000ee4 <_printf_i+0xb8>
 8000eec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000ef0:	2d00      	cmp	r5, #0
 8000ef2:	da03      	bge.n	8000efc <_printf_i+0xd0>
 8000ef4:	232d      	movs	r3, #45	@ 0x2d
 8000ef6:	426d      	negs	r5, r5
 8000ef8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000efc:	4859      	ldr	r0, [pc, #356]	@ (8001064 <_printf_i+0x238>)
 8000efe:	230a      	movs	r3, #10
 8000f00:	e011      	b.n	8000f26 <_printf_i+0xfa>
 8000f02:	6821      	ldr	r1, [r4, #0]
 8000f04:	6833      	ldr	r3, [r6, #0]
 8000f06:	0608      	lsls	r0, r1, #24
 8000f08:	f853 5b04 	ldr.w	r5, [r3], #4
 8000f0c:	d402      	bmi.n	8000f14 <_printf_i+0xe8>
 8000f0e:	0649      	lsls	r1, r1, #25
 8000f10:	bf48      	it	mi
 8000f12:	b2ad      	uxthmi	r5, r5
 8000f14:	2f6f      	cmp	r7, #111	@ 0x6f
 8000f16:	4853      	ldr	r0, [pc, #332]	@ (8001064 <_printf_i+0x238>)
 8000f18:	6033      	str	r3, [r6, #0]
 8000f1a:	bf14      	ite	ne
 8000f1c:	230a      	movne	r3, #10
 8000f1e:	2308      	moveq	r3, #8
 8000f20:	2100      	movs	r1, #0
 8000f22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000f26:	6866      	ldr	r6, [r4, #4]
 8000f28:	60a6      	str	r6, [r4, #8]
 8000f2a:	2e00      	cmp	r6, #0
 8000f2c:	bfa2      	ittt	ge
 8000f2e:	6821      	ldrge	r1, [r4, #0]
 8000f30:	f021 0104 	bicge.w	r1, r1, #4
 8000f34:	6021      	strge	r1, [r4, #0]
 8000f36:	b90d      	cbnz	r5, 8000f3c <_printf_i+0x110>
 8000f38:	2e00      	cmp	r6, #0
 8000f3a:	d04b      	beq.n	8000fd4 <_printf_i+0x1a8>
 8000f3c:	4616      	mov	r6, r2
 8000f3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8000f42:	fb03 5711 	mls	r7, r3, r1, r5
 8000f46:	5dc7      	ldrb	r7, [r0, r7]
 8000f48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000f4c:	462f      	mov	r7, r5
 8000f4e:	42bb      	cmp	r3, r7
 8000f50:	460d      	mov	r5, r1
 8000f52:	d9f4      	bls.n	8000f3e <_printf_i+0x112>
 8000f54:	2b08      	cmp	r3, #8
 8000f56:	d10b      	bne.n	8000f70 <_printf_i+0x144>
 8000f58:	6823      	ldr	r3, [r4, #0]
 8000f5a:	07df      	lsls	r7, r3, #31
 8000f5c:	d508      	bpl.n	8000f70 <_printf_i+0x144>
 8000f5e:	6923      	ldr	r3, [r4, #16]
 8000f60:	6861      	ldr	r1, [r4, #4]
 8000f62:	4299      	cmp	r1, r3
 8000f64:	bfde      	ittt	le
 8000f66:	2330      	movle	r3, #48	@ 0x30
 8000f68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000f6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000f70:	1b92      	subs	r2, r2, r6
 8000f72:	6122      	str	r2, [r4, #16]
 8000f74:	f8cd a000 	str.w	sl, [sp]
 8000f78:	464b      	mov	r3, r9
 8000f7a:	aa03      	add	r2, sp, #12
 8000f7c:	4621      	mov	r1, r4
 8000f7e:	4640      	mov	r0, r8
 8000f80:	f7ff fee6 	bl	8000d50 <_printf_common>
 8000f84:	3001      	adds	r0, #1
 8000f86:	d14a      	bne.n	800101e <_printf_i+0x1f2>
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	b004      	add	sp, #16
 8000f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f92:	6823      	ldr	r3, [r4, #0]
 8000f94:	f043 0320 	orr.w	r3, r3, #32
 8000f98:	6023      	str	r3, [r4, #0]
 8000f9a:	4833      	ldr	r0, [pc, #204]	@ (8001068 <_printf_i+0x23c>)
 8000f9c:	2778      	movs	r7, #120	@ 0x78
 8000f9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000fa2:	6823      	ldr	r3, [r4, #0]
 8000fa4:	6831      	ldr	r1, [r6, #0]
 8000fa6:	061f      	lsls	r7, r3, #24
 8000fa8:	f851 5b04 	ldr.w	r5, [r1], #4
 8000fac:	d402      	bmi.n	8000fb4 <_printf_i+0x188>
 8000fae:	065f      	lsls	r7, r3, #25
 8000fb0:	bf48      	it	mi
 8000fb2:	b2ad      	uxthmi	r5, r5
 8000fb4:	6031      	str	r1, [r6, #0]
 8000fb6:	07d9      	lsls	r1, r3, #31
 8000fb8:	bf44      	itt	mi
 8000fba:	f043 0320 	orrmi.w	r3, r3, #32
 8000fbe:	6023      	strmi	r3, [r4, #0]
 8000fc0:	b11d      	cbz	r5, 8000fca <_printf_i+0x19e>
 8000fc2:	2310      	movs	r3, #16
 8000fc4:	e7ac      	b.n	8000f20 <_printf_i+0xf4>
 8000fc6:	4827      	ldr	r0, [pc, #156]	@ (8001064 <_printf_i+0x238>)
 8000fc8:	e7e9      	b.n	8000f9e <_printf_i+0x172>
 8000fca:	6823      	ldr	r3, [r4, #0]
 8000fcc:	f023 0320 	bic.w	r3, r3, #32
 8000fd0:	6023      	str	r3, [r4, #0]
 8000fd2:	e7f6      	b.n	8000fc2 <_printf_i+0x196>
 8000fd4:	4616      	mov	r6, r2
 8000fd6:	e7bd      	b.n	8000f54 <_printf_i+0x128>
 8000fd8:	6833      	ldr	r3, [r6, #0]
 8000fda:	6825      	ldr	r5, [r4, #0]
 8000fdc:	6961      	ldr	r1, [r4, #20]
 8000fde:	1d18      	adds	r0, r3, #4
 8000fe0:	6030      	str	r0, [r6, #0]
 8000fe2:	062e      	lsls	r6, r5, #24
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	d501      	bpl.n	8000fec <_printf_i+0x1c0>
 8000fe8:	6019      	str	r1, [r3, #0]
 8000fea:	e002      	b.n	8000ff2 <_printf_i+0x1c6>
 8000fec:	0668      	lsls	r0, r5, #25
 8000fee:	d5fb      	bpl.n	8000fe8 <_printf_i+0x1bc>
 8000ff0:	8019      	strh	r1, [r3, #0]
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	6123      	str	r3, [r4, #16]
 8000ff6:	4616      	mov	r6, r2
 8000ff8:	e7bc      	b.n	8000f74 <_printf_i+0x148>
 8000ffa:	6833      	ldr	r3, [r6, #0]
 8000ffc:	1d1a      	adds	r2, r3, #4
 8000ffe:	6032      	str	r2, [r6, #0]
 8001000:	681e      	ldr	r6, [r3, #0]
 8001002:	6862      	ldr	r2, [r4, #4]
 8001004:	2100      	movs	r1, #0
 8001006:	4630      	mov	r0, r6
 8001008:	f7ff f8ea 	bl	80001e0 <memchr>
 800100c:	b108      	cbz	r0, 8001012 <_printf_i+0x1e6>
 800100e:	1b80      	subs	r0, r0, r6
 8001010:	6060      	str	r0, [r4, #4]
 8001012:	6863      	ldr	r3, [r4, #4]
 8001014:	6123      	str	r3, [r4, #16]
 8001016:	2300      	movs	r3, #0
 8001018:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800101c:	e7aa      	b.n	8000f74 <_printf_i+0x148>
 800101e:	6923      	ldr	r3, [r4, #16]
 8001020:	4632      	mov	r2, r6
 8001022:	4649      	mov	r1, r9
 8001024:	4640      	mov	r0, r8
 8001026:	47d0      	blx	sl
 8001028:	3001      	adds	r0, #1
 800102a:	d0ad      	beq.n	8000f88 <_printf_i+0x15c>
 800102c:	6823      	ldr	r3, [r4, #0]
 800102e:	079b      	lsls	r3, r3, #30
 8001030:	d413      	bmi.n	800105a <_printf_i+0x22e>
 8001032:	68e0      	ldr	r0, [r4, #12]
 8001034:	9b03      	ldr	r3, [sp, #12]
 8001036:	4298      	cmp	r0, r3
 8001038:	bfb8      	it	lt
 800103a:	4618      	movlt	r0, r3
 800103c:	e7a6      	b.n	8000f8c <_printf_i+0x160>
 800103e:	2301      	movs	r3, #1
 8001040:	4632      	mov	r2, r6
 8001042:	4649      	mov	r1, r9
 8001044:	4640      	mov	r0, r8
 8001046:	47d0      	blx	sl
 8001048:	3001      	adds	r0, #1
 800104a:	d09d      	beq.n	8000f88 <_printf_i+0x15c>
 800104c:	3501      	adds	r5, #1
 800104e:	68e3      	ldr	r3, [r4, #12]
 8001050:	9903      	ldr	r1, [sp, #12]
 8001052:	1a5b      	subs	r3, r3, r1
 8001054:	42ab      	cmp	r3, r5
 8001056:	dcf2      	bgt.n	800103e <_printf_i+0x212>
 8001058:	e7eb      	b.n	8001032 <_printf_i+0x206>
 800105a:	2500      	movs	r5, #0
 800105c:	f104 0619 	add.w	r6, r4, #25
 8001060:	e7f5      	b.n	800104e <_printf_i+0x222>
 8001062:	bf00      	nop
 8001064:	08001185 	.word	0x08001185
 8001068:	08001196 	.word	0x08001196

0800106c <memmove>:
 800106c:	4288      	cmp	r0, r1
 800106e:	b510      	push	{r4, lr}
 8001070:	eb01 0402 	add.w	r4, r1, r2
 8001074:	d902      	bls.n	800107c <memmove+0x10>
 8001076:	4284      	cmp	r4, r0
 8001078:	4623      	mov	r3, r4
 800107a:	d807      	bhi.n	800108c <memmove+0x20>
 800107c:	1e43      	subs	r3, r0, #1
 800107e:	42a1      	cmp	r1, r4
 8001080:	d008      	beq.n	8001094 <memmove+0x28>
 8001082:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001086:	f803 2f01 	strb.w	r2, [r3, #1]!
 800108a:	e7f8      	b.n	800107e <memmove+0x12>
 800108c:	4402      	add	r2, r0
 800108e:	4601      	mov	r1, r0
 8001090:	428a      	cmp	r2, r1
 8001092:	d100      	bne.n	8001096 <memmove+0x2a>
 8001094:	bd10      	pop	{r4, pc}
 8001096:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800109a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800109e:	e7f7      	b.n	8001090 <memmove+0x24>

080010a0 <_sbrk_r>:
 80010a0:	b538      	push	{r3, r4, r5, lr}
 80010a2:	4d06      	ldr	r5, [pc, #24]	@ (80010bc <_sbrk_r+0x1c>)
 80010a4:	2300      	movs	r3, #0
 80010a6:	4604      	mov	r4, r0
 80010a8:	4608      	mov	r0, r1
 80010aa:	602b      	str	r3, [r5, #0]
 80010ac:	f7ff fb42 	bl	8000734 <_sbrk>
 80010b0:	1c43      	adds	r3, r0, #1
 80010b2:	d102      	bne.n	80010ba <_sbrk_r+0x1a>
 80010b4:	682b      	ldr	r3, [r5, #0]
 80010b6:	b103      	cbz	r3, 80010ba <_sbrk_r+0x1a>
 80010b8:	6023      	str	r3, [r4, #0]
 80010ba:	bd38      	pop	{r3, r4, r5, pc}
 80010bc:	200001c8 	.word	0x200001c8

080010c0 <memcpy>:
 80010c0:	440a      	add	r2, r1
 80010c2:	4291      	cmp	r1, r2
 80010c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80010c8:	d100      	bne.n	80010cc <memcpy+0xc>
 80010ca:	4770      	bx	lr
 80010cc:	b510      	push	{r4, lr}
 80010ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80010d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80010d6:	4291      	cmp	r1, r2
 80010d8:	d1f9      	bne.n	80010ce <memcpy+0xe>
 80010da:	bd10      	pop	{r4, pc}

080010dc <_realloc_r>:
 80010dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010e0:	4680      	mov	r8, r0
 80010e2:	4615      	mov	r5, r2
 80010e4:	460c      	mov	r4, r1
 80010e6:	b921      	cbnz	r1, 80010f2 <_realloc_r+0x16>
 80010e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010ec:	4611      	mov	r1, r2
 80010ee:	f7ff bc4b 	b.w	8000988 <_malloc_r>
 80010f2:	b92a      	cbnz	r2, 8001100 <_realloc_r+0x24>
 80010f4:	f7ff fbdc 	bl	80008b0 <_free_r>
 80010f8:	2400      	movs	r4, #0
 80010fa:	4620      	mov	r0, r4
 80010fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001100:	f000 f81a 	bl	8001138 <_malloc_usable_size_r>
 8001104:	4285      	cmp	r5, r0
 8001106:	4606      	mov	r6, r0
 8001108:	d802      	bhi.n	8001110 <_realloc_r+0x34>
 800110a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800110e:	d8f4      	bhi.n	80010fa <_realloc_r+0x1e>
 8001110:	4629      	mov	r1, r5
 8001112:	4640      	mov	r0, r8
 8001114:	f7ff fc38 	bl	8000988 <_malloc_r>
 8001118:	4607      	mov	r7, r0
 800111a:	2800      	cmp	r0, #0
 800111c:	d0ec      	beq.n	80010f8 <_realloc_r+0x1c>
 800111e:	42b5      	cmp	r5, r6
 8001120:	462a      	mov	r2, r5
 8001122:	4621      	mov	r1, r4
 8001124:	bf28      	it	cs
 8001126:	4632      	movcs	r2, r6
 8001128:	f7ff ffca 	bl	80010c0 <memcpy>
 800112c:	4621      	mov	r1, r4
 800112e:	4640      	mov	r0, r8
 8001130:	f7ff fbbe 	bl	80008b0 <_free_r>
 8001134:	463c      	mov	r4, r7
 8001136:	e7e0      	b.n	80010fa <_realloc_r+0x1e>

08001138 <_malloc_usable_size_r>:
 8001138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800113c:	1f18      	subs	r0, r3, #4
 800113e:	2b00      	cmp	r3, #0
 8001140:	bfbc      	itt	lt
 8001142:	580b      	ldrlt	r3, [r1, r0]
 8001144:	18c0      	addlt	r0, r0, r3
 8001146:	4770      	bx	lr

08001148 <_init>:
 8001148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800114a:	bf00      	nop
 800114c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800114e:	bc08      	pop	{r3}
 8001150:	469e      	mov	lr, r3
 8001152:	4770      	bx	lr

08001154 <_fini>:
 8001154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001156:	bf00      	nop
 8001158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800115a:	bc08      	pop	{r3}
 800115c:	469e      	mov	lr, r3
 800115e:	4770      	bx	lr
